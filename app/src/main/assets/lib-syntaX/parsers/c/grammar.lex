%lex

%%
"/*"(.|\n)*?"*/"           /* ignore comment */
"//"[^\n]*            /* ignore comment */

"auto"					return 'AUTO'
"break"					return 'BREAK'
"case"					return 'CASE'
"char"					return 'CHAR'
"const"					return 'CONST'
"continue"				return 'CONTINUE'
"default"				return 'DEFAULT'
"do"					return 'DO'
"double"				return 'DOUBLE'
"else"					return 'ELSE'
"enum"					return 'ENUM'
"extern"				return 'EXTERN'
"float"					return 'FLOAT'
"for"					return 'FOR'
"goto"					return 'GOTO'
"if"					return 'IF'
"inline"				return 'INLINE'
"int"					return 'INT'
"long"					return 'LONG'
"register"				return 'REGISTER'
"restrict"				return 'RESTRICT'
"return"				return 'RETURN'
"short"					return 'SHORT'
"signed"				return 'SIGNED'
"sizeof"				return 'SIZEOF'
"static"				return 'STATIC'
"struct"				return 'STRUCT'
"switch"				return 'SWITCH'
"typedef"				return 'TYPEDEF'
"union"					return 'UNION'
"unsigned"				return 'UNSIGNED'
"void"					return 'VOID'
"volatile"				return 'VOLATILE'
"while"					return 'WHILE'
"_Alignas"                              return 'ALIGNAS'
"_Alignof"                              return 'ALIGNOF'
"_Atomic"                               return 'ATOMIC'
"_Bool"                                 return 'BOOL'
"_Complex"                              return 'COMPLEX'
"_Generic"                              return 'GENERIC'
"_Imaginary"                            return 'IMAGINARY'
"_Noreturn"                             return 'NORETURN'
"_Static_assert"                        return 'STATIC_ASSERT'
"_Thread_local"                         return 'THREAD_LOCAL'
"__func__"                              return 'FUNC_NAME'

[a-zA-Z_][a-zA-Z_0-9]*					return 'IDENTIFIER'

(0[xX])[a-fA-F0-9]+(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))?				return 'I_CONSTANT'
[1-9][0-9]*(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))?				return 'CONSTANT'
"0"[0-7]*(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))?				return 'CONSTANT'
(u|U|L)?"'"([^'\\\n]|(\\(['"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+)))+"'"		return 'CONSTANT'

[0-9]+([Ee][+-]?{D}+)(f|F|l|L)?				return 'CONSTANT'
[0-9]*"."[0-9]+([Ee][+-]?{D}+)?(f|F|l|L)?			return 'CONSTANT'
[0-9]+"."([Ee][+-]?{D}+)?(f|F|l|L)?			return 'CONSTANT'
(0[xX])[a-fA-F0-9]+([Pp][+-]?{D}+)(f|F|l|L)?			return 'CONSTANT'
(0[xX])[a-fA-F0-9]*"."[a-fA-F0-9]+([Pp][+-]?{D}+)(f|F|l|L)?			return 'CONSTANT'
(0[xX])[a-fA-F0-9]+"."([Pp][+-]?{D}+)(f|F|l|L)?			return 'CONSTANT'

((u8|u|U|L)?\"([^"\\\n]|(\\(['"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+)))*\"[ \t\v\n\f]*)+	return 'STRING_LITERAL'


"..."					return 'ELLIPSIS'
">>="					return 'RIGHT_ASSIGN'
"<<="					return 'LEFT_ASSIGN'
"+="					return 'ADD_ASSIGN'
"-="					return 'SUB_ASSIGN'
"*="					return 'MUL_ASSIGN'
"/="					return 'DIV_ASSIGN'
"%="					return 'MOD_ASSIGN'
"&="					return 'AND_ASSIGN'
"^="					return 'XOR_ASSIGN'
"|="					return 'OR_ASSIGN'
">>"					return 'RIGHT_OP'
"<<"					return 'LEFT_OP'
"++"					return 'INC_OP'
"--"					return 'DEC_OP'
"->"					return 'PTR_OP'
"&&"					return 'AND_OP'
"||"					return 'OR_OP'
"<="					return 'LE_OP'
">="					return 'GE_OP'
"=="					return 'EQ_OP'
"!="					return 'NE_OP'
";"					return ';'
("{"|"<%")				return '{'
("}"|"%>")				return '}'
","					return ','
":"					return ':'
"="					return '='
"("					return '('
")"					return ')'
("["|"<:")				return '['
("]"|":>")				return ']'
"."					return '.'
"&"					return '&'
"!"					return '!'
"~"					return '~'
"-"					return '-'
"+"					return '+'
"*"					return '*'
"/"					return '/'
"%"					return '%'
"<"					return '<'
">"					return '>'
"^"					return '^'
"|"					return '|'
"?"					return '?'

[ \t\v\n\f]					/* whitespace separates tokens */
.					/* discard bad characters */

<<EOF>>               return 'EOF'
